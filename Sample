import Foundation
import UserNotifications

class APIService {
    private var timer: DispatchSourceTimer?

    func startCallingAPI() {
        let queue = DispatchQueue(label: "com.example.api-caller")
        timer = DispatchSource.makeTimerSource(queue: queue)
        timer?.schedule(deadline: .now(), repeating: 60.0) // Adjust interval
        timer?.setEventHandler {
            self.callAPI()
        }
        timer?.resume()
    }

    func callAPI() {
        guard let url = URL(string: "https://example.com/api") else { return }
        var request = URLRequest(url: url)
        request.httpMethod = "GET"

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("API call failed: \(error)")
                return
            }

            if let data = data {
                let responseString = String(data: data, encoding: .utf8) ?? ""
                print("API response: \(responseString)")

                // Show notification on success
                self.showNotification(title: "API Success", body: "Received response: \(responseString)")
            }
        }
        task.resume()
    }

    func showNotification(title: String, body: String) {
        let content = UNMutableNotificationContent()
        content.title = title
        content.body = body
        content.sound = .default

        let request = UNNotificationRequest(
            identifier: UUID().uuidString,
            content: content,
            trigger: nil // Trigger immediately
        )

        UNUserNotificationCenter.current().add(request) { error in
            if let error = error {
                print("Failed to show notification: \(error)")
            }
        }
    }

    func stopCallingAPI() {
        timer?.cancel()
        timer = nil
    }
}




To create a macOS application that runs in the background and continuously calls an API after system login, you can use a Launch Agent in combination with a lightweight background macOS application. Here’s how you can achieve this:

Step 1: Set Up the macOS Application

	1.	Create the App:
	•	Use Xcode to create a macOS app project.
	•	Choose the App template and configure it with minimal UI since the app will run in the background.
	2.	API Calling Logic:
	•	Implement the logic for API calls in a background thread or timer using URLSession.
	•	For example, use Timer or DispatchSourceTimer to call the API repeatedly.

import Foundation

class APIService {
    private var timer: DispatchSourceTimer?

    func startCallingAPI() {
        let queue = DispatchQueue(label: "com.example.api-caller")
        timer = DispatchSource.makeTimerSource(queue: queue)
        timer?.schedule(deadline: .now(), repeating: 60.0) // Adjust interval
        timer?.setEventHandler {
            self.callAPI()
        }
        timer?.resume()
    }

    func callAPI() {
        guard let url = URL(string: "https://example.com/api") else { return }
        var request = URLRequest(url: url)
        request.httpMethod = "GET"

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("API call failed: \(error)")
                return
            }

            if let data = data {
                print("API response: \(String(data: data, encoding: .utf8) ?? "")")
            }
        }
        task.resume()
    }

    func stopCallingAPI() {
        timer?.cancel()
        timer = nil
    }
}


	3.	Run in Background:
	•	Set the app as agent-only so it doesn’t appear in the Dock or the app switcher.
Add the following key in the Info.plist:

<key>LSBackgroundOnly</key>
<true/>

Step 2: Create a Launch Agent

Launch Agents are used to run processes at login or on specific triggers.
	1.	Create a Launch Agent .plist File:
Create a .plist file in ~/Library/LaunchAgents/ (or /Library/LaunchAgents/ for all users).
Example com.example.api-caller.plist:

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.example.api-caller</string>
    <key>ProgramArguments</key>
    <array>
        <string>/Applications/MyAPIApp.app/Contents/MacOS/MyAPIApp</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
    <key>KeepAlive</key>
    <true/>
</dict>
</plist>


	2.	Install the Launch Agent:
	•	Place the .plist file in the ~/Library/LaunchAgents/ directory for the current user or /Library/LaunchAgents/ for all users.
	•	Load the Launch Agent using the launchctl command:

launchctl load ~/Library/LaunchAgents/com.example.api-caller.plist

Step 3: Testing and Debugging

	1.	Verify if Launch Agent is Running:
	•	Use launchctl list to check if your agent is running:

launchctl list | grep com.example.api-caller


	2.	Check Logs:
	•	Use Console.app or log show command to view logs:

log show --predicate 'eventMessage contains "com.example.api-caller"' --info

Notes

	•	KeepAlive: The KeepAlive key ensures the app is restarted if it crashes.
	•	Power Management: For energy efficiency, make sure your app isn’t consuming unnecessary resources.
	•	Code Signing: Ensure your app is properly signed if it needs to be deployed or distributed.
	•	System Integrity Protection (SIP): Keep SIP in mind if modifying /Library/LaunchAgents/.

This setup ensures your app runs in the background and starts automatically on system login.

import UIKit

// Array of image URLs
let imageUrls: [URL] = (1...100).compactMap { URL(string: "https://example.com/image\($0).jpg") }

// Serial queue for loading images
let serialQueue = DispatchQueue(label: "com.example.imageLoadingQueue")

// Array to store loaded images
var loadedImages: [UIImage] = []

// Function to download an image from a URL
func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {
    let task = URLSession.shared.dataTask(with: url) { data, response, error in
        if let data = data, let image = UIImage(data: data) {
            completion(image)
        } else {
            completion(nil)
        }
    }
    task.resume()
}

// Process the URLs serially
for url in imageUrls {
    serialQueue.async {
        let semaphore = DispatchSemaphore(value: 0) // Semaphore for waiting until the image is loaded
        
        downloadImage(from: url) { image in
            if let image = image {
                print("Loaded image from \(url)")
                loadedImages.append(image)
            } else {
                print("Failed to load image from \(url)")
            }
            semaphore.signal() // Signal the semaphore to continue
        }
        
        semaphore.wait() // Wait until the signal is received
    }
}

// Once all images are loaded
serialQueue.async {
    print("Finished loading all images. Total images loaded: \(loadedImages.count)")
}
To decode the given MCE enable request AA008104010610018442100182013CA30E81010083010084030000018402000386279C01009F02060000000001009F03060000000000005F2A0208405F3601029F150200009F530100, let’s break it into its components based on the structure described in the documentation:

Request Structure Breakdown
	1.	Start of Message and Version (Non-TLV)
	•	AA: Start of message byte.
	•	00: API Framework Version (Pre-production development).
	2.	Tag 81 (Message Information)
	•	81: Tag indicating message information.
	•	04: Length of the tag (4 bytes).
	•	0106:
	•	01: Request from host to device.
	•	06: Message reference number.
	•	1001: Command ID (Start Transaction).
	3.	Tag 84 (Request Payload)
	•	84: Request Payload tag.
	•	42: Length (66 bytes).
	•	100182013CA30E81010083010084030000018402000386279C01009F02060000000001009F03060000000000005F2A0208405F3601029F150200009F530100: Payload value (detailed below).

Payload Value Breakdown

General Structure:
	•	100182013CA30E:
	•	10: Reserved or device-specific identifier.
	•	0182: Indicates specific configuration or settings.
	•	013C: Amount to display (0x013C = 316 in decimal, in cents).
	•	A30E: Device-specific or custom-defined value.
	•	810100:
	•	81: Sub-tag indicating swipe card mode.
	•	01: Length (1 byte).
	•	00: Swipe card mode disabled.
	•	830100:
	•	83: Sub-tag indicating insert card mode.
	•	01: Length (1 byte).
	•	00: Insert card mode disabled.
	•	8403000001:
	•	84: Sub-tag indicating manual card entry (MCE) settings.
	•	03: Length (3 bytes).
	•	000001: MCE enabled with default feedback and configuration.
	•	84020003:
	•	84: Sub-tag for device mode settings.
	•	02: Length (2 bytes).
	•	0003: General settings or operation mode.
	•	8627:
	•	86: Tag for transaction type or specific indicator.
	•	27: Length or identifier.
	•	9C01:
	•	9C: Transaction type tag.
	•	01: Indicates manual entry transaction.
	•	9F02060000000001:
	•	9F02: Amount tag.
	•	06: Length (6 bytes).
	•	000000000001: Transaction amount (1 cent in decimal).
	•	9F0306000000000000:
	•	9F03: Tag for secondary amount.
	•	06: Length (6 bytes).
	•	000000000000: No secondary amount.
	•	5F2A020840:
	•	5F2A: Currency code tag.
	•	02: Length (2 bytes).
	•	0840: USD currency code (840 in ISO 4217).
	•	5F360102:
	•	5F36: Additional data or currency exponent.
	•	01: Length (1 byte).
	•	02: Indicates the currency exponent.
	•	9F15020000:
	•	9F15: Merchant category code (MCC).
	•	02: Length (2 bytes).
	•	0000: MCC set to default or unspecified.
	•	9F530100:
	•	9F53: Tag for terminal capabilities.
	•	01: Length (1 byte).
	•	00: Indicates basic or default terminal capabilities.

Final Notes
	•	The command appears correctly formatted for enabling Manual Card Entry (MCE) with specified amounts, currency, and mode configurations.
	•	Removing or modifying parts like 5F36 may affect the currency exponent or related settings, depending on the device’s requirements. If you have specific changes in mind, let me know for further assistance.




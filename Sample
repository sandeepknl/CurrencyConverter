If you want your macOS application to run as a launch service (i.e., start automatically when the user logs in or runs in the background as a service), you can achieve this by setting up the app as a background agent or configuring it as a login item.

Steps to Create a macOS Launch Service

	1.	Configure the App as a Background Agent:
	•	Use the macOS Info.plist to set the app as a background agent.
	2.	Register the App as a Login Item:
	•	Add the app to macOS’s login items so it starts when the user logs in.

1. Configure as a Background Agent

Edit Info.plist

Add the following keys to your app’s Info.plist file:

<key>LSBackgroundOnly</key>
<true/>
<key>LSUIElement</key>
<true/>

	•	LSBackgroundOnly: Makes the app a background-only process. It won’t show up in the Dock or App Switcher.
	•	LSUIElement: Prevents the app from showing a UI window or menu bar.

This setup creates a background service that runs without a user-facing interface.

2. Register the App as a Login Item

You can use the SMLoginItemSetEnabled API to register the app as a login item.
	1.	Create a Helper App target in your project to act as a launcher.
	2.	Use SMLoginItemSetEnabled in the main app to ensure the helper runs at login.

Add Helper App to the Project

	1.	Create a New Target:
	•	In Xcode, go to File > New > Target.
	•	Choose macOS > Application > App.
	•	Name it something like “HelperApp.”
	2.	Configure Helper App:
	•	Add the LSBackgroundOnly and LSUIElement keys to the helper app’s Info.plist file.
	•	Ensure the helper app contains only the code to launch your main app or perform background tasks.

Use SMLoginItemSetEnabled

In the main app, register the helper app as a login item:

import ServiceManagement

func enableHelperApp() {
    let helperAppIdentifier = "com.yourcompany.HelperApp" // Replace with your helper app's bundle identifier
    let isEnabled = SMLoginItemSetEnabled(helperAppIdentifier as CFString, true)
    
    if !isEnabled {
        print("Failed to enable helper app at login.")
    } else {
        print("Helper app enabled at login.")
    }
}

Call this function during the main app’s setup, such as in @main.

3. Run API Logic in the Background

In the helper app, run your API logic directly when it starts:

import Foundation

@main
struct HelperApp {
    static func main() {
        // Run the ProductService logic here
        let productService = ProductService()
        productService.fetchProducts()

        // Keep the app running in the background
        RunLoop.main.run()
    }
}

4. Debugging and Testing

	1.	Run in Xcode: Make sure your app or helper runs without errors.
	2.	Add the App to Login Items:
	•	Check whether the app starts automatically after login by logging out and back in.

Behavior

	1.	When the user logs in, the helper app starts automatically (using SMLoginItemSetEnabled).
	2.	The helper app performs the API call or other tasks in the background.
	3.	The app runs as a launch service, invisible to the user unless explicitly configured otherwise.

Additional Notes

	•	App Permissions: Ensure your app has the necessary permissions to access the internet and perform background tasks.
	•	Entitlements: Add the com.apple.security.application-groups entitlement if needed to share data between the main app and helper.

Let me know if you’d like help setting up any part of this!

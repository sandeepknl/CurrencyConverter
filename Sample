Here’s a simple macOS application example in Swift that makes an API call, retrieves data, and displays it in an NSTableView. This example uses SwiftUI for the interface.

Steps:

	1.	Create a new macOS app project in Xcode.
	2.	Set up your model, API call, and NSTableView.

Full Code Example

1. Model

Define a model that matches the structure of the API response:

import Foundation

struct Item: Codable, Identifiable {
    let id: Int
    let title: String
}

2. API Service

Create a service to fetch data from an API:

import Foundation

class APIService: ObservableObject {
    @Published var items: [Item] = []
    
    func fetchItems() {
        guard let url = URL(string: "https://jsonplaceholder.typicode.com/posts") else { return }
        
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let data = data {
                DispatchQueue.main.async {
                    do {
                        self.items = try JSONDecoder().decode([Item].self, from: data)
                    } catch {
                        print("Failed to decode: \(error)")
                    }
                }
            }
        }.resume()
    }
}

3. SwiftUI View with NSTableView

Create a SwiftUI view to display data in a table view:

import SwiftUI

struct ContentView: View {
    @StateObject private var apiService = APIService()
    
    var body: some View {
        VStack {
            Button("Fetch Data") {
                apiService.fetchItems()
            }
            .padding()
            
            Table(apiService.items) {
                TableColumn("ID") { item in
                    Text("\(item.id)")
                }
                TableColumn("Title") { item in
                    Text(item.title)
                        .lineLimit(1)
                }
            }
            .frame(minHeight: 300)
        }
        .padding()
    }
}

4. App Delegate

Update the app to launch with ContentView:

import SwiftUI

@main
struct MacAppExampleApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
    }
}

Explanation

	1.	Model: The Item struct matches the structure of the JSON data returned from the API.
	2.	APIService: Fetches data from the JSONPlaceholder API and publishes it.
	3.	ContentView: Displays data in a table using SwiftUI’s Table component.
	4.	Button: Initiates the API call to fetch and load data.

Result

	•	Clicking “Fetch Data” retrieves the JSON data from the API.
	•	The data is displayed in the table with two columns: ID and Title.

Let me know if you need more customization or additional features!

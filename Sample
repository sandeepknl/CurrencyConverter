To integrate this JavaScript code into a macOS application and use two buttons from a storyboard to interact with the dynaflex device, follow these steps:

1. Set Up a macOS Application in Xcode
	•	Create a new macOS App project in Xcode.
	•	Add a WKWebView to your storyboard to run the JavaScript within the app.

2. Include the JavaScript Files
	•	Add all the JavaScript files (mt_utils.js, mt_mms.js, etc.) to your Xcode project. Ensure they are included in the app bundle.
	•	Use the WKWebView to load these scripts.

3. Storyboard Setup
	•	Add two buttons to your storyboard:
	•	Open Device button (openDeviceButton).
	•	Send Command button (sendCommandButton).
	•	Add a WKWebView to display or interact with logs/UI if needed.

4. Code Integration

In your ViewController.swift, load the JavaScript and handle button actions.

ViewController.swift

import Cocoa
import WebKit

class ViewController: NSViewController {
    @IBOutlet weak var webView: WKWebView!
    @IBOutlet weak var openDeviceButton: NSButton!
    @IBOutlet weak var sendCommandButton: NSButton!

    override func viewDidLoad() {
        super.viewDidLoad()

        // Configure WKWebView
        let config = WKWebViewConfiguration()
        webView = WKWebView(frame: .zero, configuration: config)
        view.addSubview(webView)
        webView.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            webView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            webView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            webView.topAnchor.constraint(equalTo: view.topAnchor),
            webView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])

        // Load the HTML and JavaScript
        loadHTMLAndJavaScript()
    }

    func loadHTMLAndJavaScript() {
        // Path to your bundled HTML/JavaScript file
        if let htmlPath = Bundle.main.path(forResource: "index", ofType: "html") {
            let url = URL(fileURLWithPath: htmlPath)
            webView.loadFileURL(url, allowingReadAccessTo: url)
        }
    }

    // Handle Open Device Button
    @IBAction func openDeviceClicked(_ sender: NSButton) {
        webView.evaluateJavaScript("handleOpenButton()") { result, error in
            if let error = error {
                print("Error opening device: \(error)")
            } else {
                print("Device opened successfully.")
            }
        }
    }

    // Handle Send Command Button
    @IBAction func sendCommandClicked(_ sender: NSButton) {
        let command = "GETAPPVERSION" // Example command
        webView.evaluateJavaScript("parseCommand('\(command)')") { result, error in
            if let error = error {
                print("Error sending command: \(error)")
            } else {
                print("Command sent successfully: \(result ?? "")")
            }
        }
    }
}

5. Create an HTML File
	•	Create an index.html file that serves as the entry point for your WKWebView.
	•	Include all your JavaScript files in the <script> tags.

index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynaflex Device</title>
</head>
<body>
    <h1>Dynaflex Device Interface</h1>
    <script src="mt_utils.js"></script>
    <script src="mt_mms.js"></script>
    <script src="mt_hid.js"></script>
    <script src="mt_ui.js"></script>
    <script src="mt_rms_mms.js"></script>
    <script src="mt_rms_api.js"></script>
    <script src="mt_events.js"></script>
</body>
</html>

6. Test the App
	•	Run the macOS app.
	•	Use the Open Device button to open the device and Send Command to send commands like GETAPPVERSION or others.

Notes:
	•	You may need to enable JavaScript in the WKWebView configuration.
	•	The index.html file and JavaScript files must be included in the app bundle.
	•	If the device interactions require native macOS APIs (e.g., USB communication), you might need to create a macOS-native layer that communicates with the JavaScript.

Let me know if you’d like detailed guidance on any of these steps!






        let tagByte = TagBuffer[0];
        let endIndex =
          iTLV + lengthValue > dataLength ? dataLength : iTLV + lengthValue;
        let len = endIndex - iTLV;
        let valueBytes =
          len > 0 ? toHexString(data.slice(iTLV, iTLV + len)) : "";
        result.push({
          tag: tagBytes,
          tagLength: !lengthValue ? valueBytes.length + 1 / 2 : lengthValue,
          tagValue: valueBytes,
        });
        if (!((tagByte & constructedFlag) == constructedFlag)) {
          iTLV += lengthValue;
        }
      }
      bTag = true;
    }
  }
  return result;
}

export function getTagValue(tagName, defaultTagValue, tlvData, asASCII) {
  try 
  {
    var TLVS = tlvParser(tlvData);
    var currtlv = TLVS.find((tlv) => tlv.tag === tagName);
    if (currtlv == undefined) return defaultTagValue;
    {
      if (asASCII == true) {
        return hexToASCIIRemoveNull(currtlv.tagValue);
      } 
      else 
      {
        return currtlv.tagValue;
      }
    }
  } 
  catch (error) {
    return defaultTagValue;
  }
  
}

export function removeSpaces(str) {
  return str.replace(/\s+/g, "");
}

export function hexToBytes(hex) {
  let bytes = [];
  for (let i = 0; i < hex.length; i += 2)
    bytes.push(parseInt(hex.substring(i, i+2), 16));
  return bytes;
}

export function debugLog(data) {
  // console.log(`DebugLog: ${data}`);
}

export function getDefaultValue(key, defaultValue){
  var keyVal = localStorage.getItem(key);
  if (keyVal == null) keyVal = defaultValue;
  return keyVal;
}

export function saveDefaultValue(key, value){
  localStorage.setItem(key, value);    
}

export function makeid(length) {
  let result = '';
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  const charactersLength = characters.length;
  let counter = 0;
  while (counter < length) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
    counter += 1;
  }
  return result;
}

export function filterString(inputString) {
	const filteredString = inputString.replace(/[^0-9A-Za-z]/g, '');
	return filteredString;
};



Array.prototype.zeroFill = function (len) {
  for (var i = this.length; i < len; i++) {
    this[i] = 0;
  }
  return this;
};


